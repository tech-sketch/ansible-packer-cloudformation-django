{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "ELB-RDS(MySQL) Django CloudFormation Template",
  "Parameters": {
    "ResourceName": {
      "Type": "String",
      "Description": "Name tag"
    },
    "OwnerName": {
      "Type": "String",
      "Description": "owner tag"
    },
    "Region": {
      "Type": "String",
      "Description": "Target region",
      "Default": "ap-northeast-1",
      "AllowedValues": ["ap-northeast-1"]
    },
    "RDSInstanceType": {
      "Type": "String",
      "Description": "RDS InstnceType",
      "Default": "db.m1.small"
    },
    "RDSStorageSizeGB": {
      "Type": "Number",
      "Description": "RDS Instance Storage size (GB)"
    },
    "RDSDBName": {
      "Type": "String",
      "Description": "RDS db name (only alphanumeric)"
    },
    "RDSUserName": {
      "Type": "String",
      "Description": "RDS user name"
    },
    "RDSUserPassword": {
      "Type": "String",
      "Description": "RDS user password"
    },
    "HealthCheckTarget": {
      "Type": "String",
      "Description": "health check target (like 'HTTP:80/index.html')",
      "Default": "HTTP:80/"
    },
    "AutoScalingAMI": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "AutoScaling AMI ID"
    },
    "AutoScalingInstanceType": {
      "Type": "String",
      "Description": "AutoScaling InstanceType",
      "Default": "t2.micro"
    },
    "AutoScalingInstanceKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "AutoScaling KeyPair name"
    },
    "AutoScalingMaxSize": {
      "Type": "Number",
      "Description": "AutoScaling max size",
      "Default": 2
    },
    "AutoScalingMinSize": {
      "Type": "Number",
      "Description": "AutoScaling minx size",
      "Default": 2
    },
    "AutoScalingDesiredCapacity": {
      "Type": "Number",
      "Description": "AutoScaling desired capacity",
      "Default": 2
    }
  },
  "Mappings": {
    "CidrMap": {
      "VPC"    : { "Block": "10.10.0.0/16" },
      "Public" : { "AZ1": "10.10.11.0/24", "AZ2": "10.10.21.0/24" },
      "Private": { "AZ1": "10.10.12.0/24", "AZ2": "10.10.22.0/24" }
    },
    "PortMap": {
      "HTTP"   : { "Port": 80 , "Protocol": "HTTP"},
      "SSH"    : { "Port": 22 },
      "MySQL"  : { "Port": 3306 }
    },
    "RDSMap": {
      "ParameterGroup": {
        "Family"  : "mysql5.6",
        "Encoding": "utf8"
      },
      "Instance": {
        "Engine": "mysql",
        "EngineVersion": "5.6.23",
        "MultiAZ": true,
        "PreferredMaintenanceWindow": "thu:18:26-thu:18:56",
        "PreferredBackupWindow": "20:01-20:31",
        "BackupRetentionPeriod": 7
      }
    },
    "ELBMap": {
      "HealthCheck": {
        "Interval"          : 30,
        "Timeout"           : 5,
        "HealthyThreshold"  : 10,
        "UnhealthyThreshold": 2
      },
      "AutoScaling": {
        "Cooldown"              : 300,
        "HealthCheckGracePeriod": 300
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "VPC", "Block" ] },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          { "Key": "Name",  "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-vpc" ] ] } },
          { "Key": "owner", "Value": { "Ref": "OwnerName" } }
        ]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Public", "AZ1" ] },
        "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "Region" } } ] },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-public-1" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "public" }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Public", "AZ2" ] },
        "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": { "Ref": "Region" } } ] },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-public-2" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "public" }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Private", "AZ1" ] },
        "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "Region" } } ] },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-private-1" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "private" }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Private", "AZ2" ] },
        "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": { "Ref": "Region" } } ] },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-private-2" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "private" }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-igw" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } }
        ]
      }
    },
    "GatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-rt-public" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "public" }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      },
      "DependsOn": "GatewayAttachment"
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-rt-private" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "private" }
        ]
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet1" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet2" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": ["", [ "SG for ELB of ", { "Ref": "ResourceName" } ] ] },
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-sg-elb" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "elb" }
        ]
      }
    },
    "ELBSecurityGroupIngressHTTP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "ELBSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": { "Fn::FindInMap": [ "PortMap", "HTTP", "Port" ] },
        "ToPort": { "Fn::FindInMap": [ "PortMap", "HTTP", "Port" ] },
        "CidrIp": "0.0.0.0/0"
      }
    },
    "PublicSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": ["", [ "SG for public subnets of ", { "Ref": "ResourceName" } ] ] },
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-sg-public" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "public" }
        ]
      }
    },
    "PublicSecurityGroupIngressHTTP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "PublicSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": { "Fn::FindInMap": [ "PortMap", "HTTP", "Port" ] },
        "ToPort": { "Fn::FindInMap": [ "PortMap", "HTTP", "Port" ] },
        "SourceSecurityGroupId": { "Ref": "ELBSecurityGroup" }
      }
    },
    "PublicSecurityGroupIngressSSH": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "PublicSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": { "Fn::FindInMap": [ "PortMap", "SSH", "Port" ] },
        "ToPort": { "Fn::FindInMap": [ "PortMap", "SSH", "Port" ] },
        "CidrIp": "0.0.0.0/0"
      }
    },
    "PrivateSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": ["", [ "SG for private subnets of ", { "Ref": "ResourceName" } ] ] },
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-sg-private" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "private" }
        ]
      }
    },
    "PrivateSecurityGroupIngressMySQL": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "PrivateSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": { "Fn::FindInMap": [ "PortMap", "MySQL", "Port" ] },
        "ToPort": { "Fn::FindInMap": [ "PortMap", "MySQL", "Port" ] },
        "SourceSecurityGroupId": { "Ref": "PublicSecurityGroup" }
      }
    },
    "RDSSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": { "Fn::Join": [ "", [ "RDS SubnetGroup of ", { "Ref": "ResourceName" } ] ] },
        "SubnetIds": [
          { "Ref": "PrivateSubnet1" },
          { "Ref": "PrivateSubnet2" }
        ],
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-db-subnets" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "private" }
        ]
      }
    },
    "RDSParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Description": { "Fn::Join": [ "", [ "RDS ParameterGroup of ", { "Ref": "ResourceName" } ] ] },
        "Family": { "Fn::FindInMap": [ "RDSMap", "ParameterGroup", "Family" ] },
        "Parameters": {
          "character_set_client": { "Fn::FindInMap": [ "RDSMap", "ParameterGroup", "Encoding" ] },
          "character_set_connection": { "Fn::FindInMap": [ "RDSMap", "ParameterGroup", "Encoding" ] },
          "character_set_database": { "Fn::FindInMap": [ "RDSMap", "ParameterGroup", "Encoding" ] },
          "character_set_results": { "Fn::FindInMap": [ "RDSMap", "ParameterGroup", "Encoding" ] },
          "character_set_server": { "Fn::FindInMap": [ "RDSMap", "ParameterGroup", "Encoding" ] },
          "skip-character-set-client-handshake": 1
        },
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-db-parameters" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "private" }
        ]
      }
    },
    "RDS": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBInstanceClass": { "Ref": "RDSInstanceType" },
        "AllocatedStorage": { "Ref": "RDSStorageSizeGB" },
        "StorageType": "standard",
        "MultiAZ": { "Fn::FindInMap": [ "RDSMap", "Instance", "MultiAZ" ] },
        "Engine": { "Fn::FindInMap": [ "RDSMap", "Instance", "Engine" ] },
        "EngineVersion": { "Fn::FindInMap": [ "RDSMap", "Instance", "EngineVersion" ] },
        "PreferredBackupWindow": { "Fn::FindInMap": [ "RDSMap", "Instance", "PreferredBackupWindow" ] },
        "PreferredMaintenanceWindow": { "Fn::FindInMap": [ "RDSMap", "Instance", "PreferredMaintenanceWindow" ] },
        "BackupRetentionPeriod": { "Fn::FindInMap": [ "RDSMap", "Instance", "BackupRetentionPeriod" ] },
        "AllowMajorVersionUpgrade": false,
        "AutoMinorVersionUpgrade": true,
        "Port": { "Fn::FindInMap": [ "PortMap", "MySQL", "Port" ] },
        "DBName": { "Ref": "RDSDBName" },
        "MasterUsername": { "Ref": "RDSUserName" },
        "MasterUserPassword": { "Ref": "RDSUserPassword" },
        "DBSubnetGroupName": { "Ref": "RDSSubnetGroup" },
        "DBParameterGroupName": { "Ref": "RDSParameterGroup" },
        "VPCSecurityGroups": [ { "Ref": "PrivateSecurityGroup" } ],
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-rds" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } }
        ]
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-elb" ] ] },
        "CrossZone": true,
        "Subnets": [
          { "Ref": "PublicSubnet1" },
          { "Ref": "PublicSubnet2" }
        ],
        "HealthCheck": {
          "Target"            : { "Ref": "HealthCheckTarget" },
          "Interval"          : { "Fn::FindInMap": [ "ELBMap", "HealthCheck", "Interval" ] },
          "Timeout"           : { "Fn::FindInMap": [ "ELBMap", "HealthCheck", "Timeout" ] },
          "HealthyThreshold"  : { "Fn::FindInMap": [ "ELBMap", "HealthCheck", "HealthyThreshold" ] },
          "UnhealthyThreshold": { "Fn::FindInMap": [ "ELBMap", "HealthCheck", "UnhealthyThreshold" ] }
        },
        "SecurityGroups": [ { "Ref": "ELBSecurityGroup" } ],
        "Listeners": [
          {
            "LoadBalancerPort": { "Fn::FindInMap": [ "PortMap", "HTTP", "Port" ] },
            "Protocol"        : { "Fn::FindInMap": [ "PortMap", "HTTP", "Protocol" ] },
            "InstancePort"    : { "Fn::FindInMap": [ "PortMap", "HTTP", "Port" ] },
            "InstanceProtocol": { "Fn::FindInMap": [ "PortMap", "HTTP", "Protocol" ] }
          }
        ],
        "Tags": [
          { "Key": "Name",    "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-elb" ] ] } },
          { "Key": "owner",   "Value": { "Ref": "OwnerName" } },
          { "Key": "network", "Value": "elb" }
        ]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Ref": "AutoScalingAMI" },
        "InstanceType": { "Ref": "AutoScalingInstanceType" },
        "KeyName": { "Ref": "AutoScalingInstanceKeyName" },
        "InstanceMonitoring": true,
        "SecurityGroups": [ { "Ref": "PublicSecurityGroup" } ],
        "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
          "#!/bin/bash\n",
          "sed -i -e 's/<<ALLOWED_HOST>>/",
          { "Fn::GetAtt": [ "ELB", "DNSName" ] },
          "/g' /home/ubuntu/tutorial/tutorial/settings.py\n",
          "sed -i -e 's/<<DATABASE_NAME>>/",
          { "Ref": "RDSDBName" },
          "/g' /home/ubuntu/tutorial/tutorial/settings.py\n",
          "sed -i -e 's/<<DATABASE_USER>>/",
          { "Ref": "RDSUserName" },
          "/g' /home/ubuntu/tutorial/tutorial/settings.py\n",
          "sed -i -e 's/<<DATABASE_PASSEORD>>/",
          { "Ref": "RDSUserPassword" },
          "/g' /home/ubuntu/tutorial/tutorial/settings.py\n",
          "sed -i -e 's/<<DATABASE_HOST>>/",
          { "Fn::GetAtt": [ "RDS", "Endpoint.Address" ] },
          "/g' /home/ubuntu/tutorial/tutorial/settings.py\n",
          "sed -i -e 's/<<DATABASE_PORT>>/",
          { "Fn::GetAtt": [ "RDS", "Endpoint.Port" ] },
          "/g' /home/ubuntu/tutorial/tutorial/settings.py\n",
          "/home/ubuntu/.pyenv/shims/python /home/ubuntu/tutorial/manage.py migrate\n",
          "service gunicorn restart\n",
          "service nginx restart\n"
        ] ] } }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LoadBalancerNames": [ { "Ref": "ELB" } ],
        "AvailabilityZones": { "Fn::GetAZs": { "Ref": "Region" } },
        "VPCZoneIdentifier": [
          { "Ref": "PublicSubnet1" },
          { "Ref": "PublicSubnet2" }
        ],
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MaxSize": { "Ref": "AutoScalingMaxSize" },
        "MinSize": { "Ref": "AutoScalingMinSize" },
        "DesiredCapacity": { "Ref": "AutoScalingDesiredCapacity" },
        "Cooldown": { "Fn::FindInMap": [ "ELBMap", "AutoScaling", "Cooldown" ] },
        "HealthCheckGracePeriod": { "Fn::FindInMap": [ "ELBMap", "AutoScaling", "HealthCheckGracePeriod" ] },
        "HealthCheckType": "ELB",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": ["", [ { "Ref": "ResourceName" }, "-asg" ] ] },
            "PropagateAtLaunch": true
          },
          {
            "Key": "owner",
            "Value": { "Ref": "OwnerName" },
            "PropagateAtLaunch": true
          }
        ]
      }
    }
  },
  "Outputs": {
    "RDSEndpointAddress": {
      "Description": "RDS Endpoint Address",
      "Value": { "Fn::GetAtt": [ "RDS", "Endpoint.Address" ] }
    },
    "RDSEndpointPort": {
      "Description": "RDS Endpoint Port",
      "Value": { "Fn::GetAtt": [ "RDS", "Endpoint.Port" ] }
    },
    "ELBEndpointAddress": {
      "Description": "ELB Endpoint Address",
      "Value": { "Fn::GetAtt": [ "ELB", "DNSName" ] }
    }
  }
}
